'''
Link to original problem:
https://leetcode.com/problems/rotate-image/

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. 
DO NOT allocate another 2D matrix and do the rotation.
'''

'''
Sketch:
We can complete our rotation by performing a series of swaps each involving four squares, for example,
the four corners of the square would be one swap.  If we deconstruct the square into concentric layers, 
each layer will require n-1 swaps to complete, where n is the length of the layer.  
'''

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        n = len(matrix)

        for i in range(n//2):
            for j in range(i, n-i-1):
                matrix[i][j], matrix[j][-(i+1)], matrix[-(i+1)][-(j+1)], matrix[-(j+1)][i] = matrix[-(j+1)][i], matrix[i][j], matrix[j][-(i+1)], matrix[-(i+1)][-(j+1)] 
