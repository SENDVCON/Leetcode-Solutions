'''
Link to original problem:
https://leetcode.com/problems/check-if-numbers-are-ascending-in-a-sentence/

A sentence is a list of tokens separated by a single space with no leading 
or trailing spaces. Every token is either a positive number consisting of 
digits 0-9 with no leading zeros, or a word consisting of lowercase English 
letters.

For example, "a puppy has 2 eyes 4 legs" is a sentence with seven tokens: 
"2" and "4" are numbers and the other tokens such as "puppy" are words.
Given a string s representing a sentence, you need to check if all the 
numbers in s are strictly increasing from left to right (i.e., other than 
the last number, each number is strictly smaller than the number on its 
right in s).

Return true if so, or false otherwise.
'''

'''
Note: 
This solution is utilizes list comprehension in Python 3, this solution is 
not the most efficient in terms of time complexity but benefits from 
superior legibility and demonstrates the power of list comprehension in 
Python 3. 
'''

class Solution:
    def areNumbersAscending(self, s: str) -> bool:
    
        '''
        s.split(' ') the split function splits a string into a list of substrings 
        based on the delimiter argument passed in which in this case is a space, ' '
        thus s.split(' ') is now a list of all of our tokens.
      
        token.isnumeric() returns true if the str can be cased to a number
        
        int(token) casts our token from a string to an int
        
        Thus, our list comprehension reads: 
        cast token to an int for every token in s.split(' ') that passes our 
        condition token.isnumeric()
        '''
        
        nums = [int(token) for token in s.split(' ') if token.isnumeric()]
        return sorted(nums) == (nums)
