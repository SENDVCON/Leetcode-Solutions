'''
Link to original problem:
https://leetcode.com/problems/jump-game/

You are given an integer array nums. You are initially positioned at the array's first index, 
and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.
'''

'''
Intuition:
At each stone, we are given the option to travel up to n steps.  Since we 
have the option to pick any number of steps up to n, then we should always
land on the stone that can get us the furthest in aggregate. 

For example, consider 

[4, 1, 3, 1, 2, 5, 4, 0]

If we start on index 0, our options are to 
move 1 step to index 1, which would allow us to move a further 1 or 2 total
move 2 steps to index 2, which would allow us to move a further 3 or 5 total
move 3 steps to index 3, which would allow us to move a further 1 or 4 total
move 4 steps to index 4, which would allow us to move a further 2 or 6 total

If we jump to index 4, we can still achieve any destination in the same 
number of moves that would be achievable if we used our first move to jump to
index 1, 2 or 3, however, it also gives us options unachievable if we jump 
to index 4 on move 1, namely we can reach index 6 in 2 moves.  Thus, picking 
index 4 as our first move is at least as good, if not better, than any other 
move.  Again, the key here is that you have the option to choose UP TO n steps,
but are not obligated to move the full n steps.  
'''

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        pointer = 0
        while pointer < len(nums):
        
            # Win condition, note, if we check this first we can account 
            # for the trivial case where nums = [0]
            if pointer + nums[pointer] >= len(nums) - 1:
                return True
                
            # Lose condition
            elif nums[pointer] == 0:
                return False
            
            max_step = 0
            max_step_pointer = 0
            for i in range(1, nums[pointer]+1):
                # If equivalent distance, picking the rightmost will 
                # eliminate redundant steps and speep up our algorithm
                if i + nums[pointer+i] >= max_step:
                    max_step = i + nums[pointer+i]
                    max_step_pointer = i
            pointer += max_step_pointer
            
        return True
