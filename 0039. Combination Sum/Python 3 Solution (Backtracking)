'''
Link to original problem:
https://leetcode.com/problems/combination-sum/

Given an array of distinct integers candidates and a target integer target, return a list 
of all unique combinations of candidates where the chosen numbers sum to target. You may 
return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations 
are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 
150 combinations for the given input.
'''


class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        solutions = []
        
        def bt(sum_array, candidates, pointer, target):
            if sum(sum_array) > target or pointer == len(candidates):
                return 
            elif sum(sum_array) == target:
                solutions.append(sum_array.copy())
                return
            else:
                sum_array.append(candidates[pointer])
                bt(sum_array, candidates, pointer, target)
                
                sum_array.pop()
                bt(sum_array, candidates, pointer+1, target)
                
        bt([], candidates, 0, target)
        
        return solutions
