'''
Link to original problem:
https://leetcode.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/

There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. 
You are given a string colors of length n where colors[i] is the color of the ith piece.

Alice and Bob are playing a game where they take alternating turns removing pieces from the line. 
In this game, Alice moves first.

Alice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. 
She is not allowed to remove pieces that are colored 'B'.

Bob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. 
He is not allowed to remove pieces that are colored 'A'.

Alice and Bob cannot remove pieces from the edge of the line.

If a player cannot make a move on their turn, that player loses and the other player wins.

Assuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.
'''

'''
Intuition: 
One thing to consider, is that since Alice can only move an 'A' that is between two other 'A's 
and Bob the same for 'B's, neither Alice's moves nor Bob's moves can affect the other player's 
potential moves since any 'A' that is currently next to a 'B' will remain such after any legal 
move and vice versa. 

Therefore, we only need to count the number of valid moves each player has in the initial state,
which is essentially the number of substrings of 'AAA' and 'BBB' for Alice and Bob respectively.
Note that overlaps count, i.e. 'AAAA' results in 2 legal moves 'AAAAA' in 3 and so forth. 

Thus, the implementation of a solution in O(n) is very simple, we simply iterate through the 
string to check if the char at each value is surrounded by matching values and add a move for 
Alice or Bob as appropriate.
'''


class Solution:
    def winnerOfGame(self, colors: str) -> bool:
        
        Alice = 0
        Bob = 0
        
        i = 1
        while i < len(colors)-1:
            if colors[i-1] == colors[i] and colors [i] == colors[i+1]:
                if colors[i] == 'A':
                    Alice += 1
                else:
                    Bob += 1
            i += 1

        return Alice > Bob
